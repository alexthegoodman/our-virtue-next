// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  isActive  Boolean  @default(true)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  threads          Thread[]
  comments         Comment[]
  votes            Vote[]
  povertyDataSources PovertyDataSource[]
  createdChurches  Church[] @relation("ChurchCreator")
  churchMemberships ChurchMember[]
  churchPosts      ChurchPost[] @relation("ChurchPostAuthor")
  churchComments   ChurchPostComment[] @relation("ChurchCommentAuthor")

  @@map("users")
}

model Thread {
  id          String      @id @default(cuid())
  title       String
  content     String
  stanzaPath  String      // e.g., "/salvation/believe-in-god"
  type        ThreadType  @default(DISCUSSION)
  tags        String[]    // Array of tags
  isSticky    Boolean     @default(false)
  isLocked    Boolean     @default(false)
  isModerated Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  comments    Comment[]
  votes       Vote[]

  @@map("threads")
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  isModerated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  thread      Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  parentId    String?
  replies     Comment[] @relation("CommentReplies")
  votes       Vote[]

  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  isUpvote  Boolean  // true for upvote, false for downvote
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  thread    Thread?  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  // Ensure a user can only vote once per thread/comment
  @@unique([userId, threadId])
  @@unique([userId, commentId])
  @@map("votes")
}

enum ThreadType {
  DISCUSSION
  QUESTION
  REFLECTION
  PRAYER_REQUEST
  TESTIMONY
}

model PovertyDataSource {
  id               String   @id @default(cuid())
  title            String   // e.g., "US Census Bureau Poverty Statistics 2023"
  description      String?  // Optional description of the data source
  sourceUrl        String   // Attribution link to original data source
  sourceOrg        String?  // Organization name (e.g., "US Census Bureau")
  dataTable        Json     // Standardized JSON data table
  geographicScope  String   // e.g., "United States", "California", "Global"
  timeRange        String?  // e.g., "2020-2023", "Annual 2022"
  dataType         String   // e.g., "poverty_rate", "income_distribution", "housing_cost"
  isVerified       Boolean  @default(false) // Admin verification status
  isActive         Boolean  @default(true)
  submissionNotes  String?  // Optional notes from submitter
  adminNotes       String?  // Internal admin notes
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  submitter        User     @relation(fields: [submitterId], references: [id], onDelete: Cascade)
  submitterId      String

  @@map("poverty_data_sources")
}

model BookRequest {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String?  // Optional phone number
  address     String
  city        String
  state       String
  zipCode     String
  country     String   @default("United States")
  notes       String?  // Optional message from requester
  status      BookRequestStatus @default(PENDING)
  shippedAt   DateTime?
  adminNotes  String?  // Internal admin notes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("book_requests")
}

enum BookRequestStatus {
  PENDING
  PROCESSING
  SHIPPED
  CANCELLED
}

model Church {
  id          String   @id @default(cuid())
  name        String
  description String
  slug        String   @unique // URL-friendly name
  imageUrl    String?  // Vercel Blob image URL
  category    ChurchCategory
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User     @relation("ChurchCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  members     ChurchMember[]
  posts       ChurchPost[]

  @@map("churches")
}

model ChurchMember {
  id        String   @id @default(cuid())
  joinedAt  DateTime @default(now())
  role      ChurchMemberRole @default(MEMBER)

  // Relations
  church    Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  churchId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([churchId, userId])
  @@map("church_members")
}

model ChurchPost {
  id          String   @id @default(cuid())
  title       String?  // Optional title for posts
  content     String
  imageUrl    String?  // Optional image attachment
  isPinned    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  church      Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  churchId    String
  author      User     @relation("ChurchPostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  comments    ChurchPostComment[]

  @@map("church_posts")
}

model ChurchPostComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post      ChurchPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User       @relation("ChurchCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  @@map("church_post_comments")
}

enum ChurchCategory {
  PARENTS      // Still Waters - for parents
  YOUNG_PEOPLE // The New Foundation - for younger people
  WORKERS      // Servants of the Harvest - for hard working people
}

enum ChurchMemberRole {
  MEMBER
  MODERATOR
  ADMIN
}